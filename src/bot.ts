import axios from 'axios';
import { ActivityHandler, MessageFactory, TurnContext } from 'botbuilder';
import { MESSAGES_PATH } from 'botbuilder/lib/streaming';
import { parse } from 'node-html-parser';
import emojis = require('emoji-random-list');

const url = 'https://www.sabis.se/restauranger-cafeer/vara-foretagsrestauranger/skandia/';
const AxiosInstance = axios.create();
const iconMap = {
    'icon--gluten': 'üåæ',
    'icon--lactose': 'ü•õ',
    'icon--farmers-choice': 'üßë‚Äçüåæ'
};

const yesNoReplies = [
    'Ja?', 'Nej.', 'Nja.', 'S√§ger du det s√•.', '√Ñr det inte dags f√∂r dig att jobba lite?', 'Absolut.',
    'Lugn nu.', 'Javisst!', 'N√•gon tycker s√§kert att det √§r s√• i alla fall.', 'Vad tycker du?',
    'Lyssna p√• <name> ist√§llet, jag vet ingenting.',
    'Det kan vara s√•, i vilket fall s√• √§r det nog <name>\'s fel.',
    'Ja f√∂r att t√§nka fritt √§r stort, men att t√§nka som <name> √§r st√∂rre.',
    'Strunta i den fr√•gan, dags att fika! Eller vad s√§ger du <name>?',
    'S√• sant som att en <noun> √§r en delikatess f√∂r <name>.'
];

const whenReplies = [
    'Nu.', 'Imorgon.', 'Aldrig, om du fr√•gar mig, vilket du gjorde.', 'Den dagen en <noun> √§r en <noun>.',
    'R√§tt s√§ker p√• att det blir det h√§r √•rtiondet i alla fall!', 'P√• momomongen!',
    'Hade en <noun> prokrastinerat med det?'
]

const whereReplies = [
    'I Sabis.', 'I Ritrovo.', 'Hemma hos <name>!', "Vart som helst f√∂rutom i <name>'s k√§llare!",
    'P√• taket.', 'Niv√•22?', 'T-Centralen.', 'Vi g√•r till ett zoo och hittar buren f√∂r en <noun>!'
]

const nameReplies = [
    'Definitivt <name>.', 'Man skulle kunna tro att det √§r <name> som ligger bakom allting.',
    'Den vise <name>, som jag brukar s√§ga.', '<name> =', 'Ole dole doff <name>.',
    '<name> och en dag kommer det faktist resa en <noun> till kontoret.',
    "Det vet jag inte, men <name>'s dr√∂m-husdjur √§r i alla fall en <noun>.",
    'Vad det blir f√∂r lunch? <name> kommer i alla fall att √§ta en <noun>.',
    "Jag vet inte, men fr√•ga <name>'s <noun>, den vet saker...",
    '<name> och jag har en grej going, s√• jag passar p√• den.',
    'Fr√•ga <name> direkt ist√§llet.', 'En <noun> h√•ller inga hemligheter om <name>.',
    'Det var en g√•ng en <noun>, och det var <name>.'
];

const fikaReplies = [
    'Fikapauser √§r att rekommendera, f√∂r mycket kod s√•sar ihop hj√§rnkontoret.',
    'Absolut fikadags! Blir en <noun> till fika idag.',
    'Kalla det m√∂te, men √§t bullar. Det g√∂r chefen hela tiden.',
    'Om man skulle ta och v√§nda p√• det ist√§llet? Vi k√∂r fika som standard och ibland s√• jobbar vi ocks√•.',
    'Mitt favotitfika √§r i alla fall <noun>!',
    'K√∂r en <noun> i micron och k√§ka, mycket protein har jag h√∂rt.',
    'Om du f√∂rst rider ner till ritrovo p√• en <noun>, d√• √§r du nog v√§rd en fika sen kan jag tycka!',
    'En <noun> till fikat, √§r den medbjuden eller ska den √§tas?',
    'Ta med <name> till Ritrovo och dela p√• en <noun> vetja!',
    'En <noun> ner i en mixer bara, nyttigt och fettsn√•lt!'
];

const names = [
    'Johannes', 'Lukas', 'Simon', 'UX-J√∂rgen', 'J√∂rgen', 'Abdi', 'Teddy', 'Jocke', 'Frida', 'Lars',
    'Tor', 'Fredrik', 'Tobias', 'Petrus', 'Johan', 'Anders', 'Rickard', 'John', 'Samuel', 'Sofie'
];

// Substantiv (en)
const nouns = [
    'elefant', 'get', 'g√•s', 'fiskm√•s', 'hummer', 'hamster', 'gospelk√∂r', 'helikopter',
    'valross', 'stol', 'kaviartub', 'lampa', 'p√•se kreditkort', 'mobil', 'flygande matta',
    'b√•t', 'fl√§skig dam', 'scout', 'fet gubbe', 'Trump', 'Putin', 'skolklass', 'skolfr√∂ken',
    'h√§st och vagn', 'semla', '12 centimeters drake', 'begagnad macka ifr√•n dagis',
    'vante', '√∂lbricka', 'shotbricka', 'lever'
];

const factReplies = [
    'Icke existerande fr√•gor, f√•r icke-existerande svar; <noun>.',
    'Mycket bra konstaterande!',
    'Tror faktiskt att du har fel d√§r.',
    'Flat-earther!',
    'Ingenting √§r s√§kert, f√∂rutom att <name> √§r en <noun>.',
    'Bra sagt, vill bara passa p√• att varna f√∂r blixthalka pga en utsmetad <noun>.',
    '<noun> + <noun> = ',
    '<name> + <noun> = ',
    '<name> + <name> = ',
    'Great bots think alike, eller hur <name>?',
    '<name> t√§nker f√∂r mycket.',
    '<name> t√§nker f√∂r mycket lite, lite som en <noun>.',
    'Tror nog att <name> och <name> √§r samma person, och egentligen inte en person, mer en <noun>.',
    'Petrus-gropen, nu!'
];

const replaceName = (text: string, name: string) => 
    text.replace('<name>', name);

const replaceNoun = (text: string, noun: string) => 
    text.replace('<noun>', noun);

const containedNames = (text: string): string[] =>
    names.filter((name) => text.includes(name.toLowerCase()));

const getRandomElement = (arr: any[]) =>
    arr[Math.floor(Math.random() * arr.length)];

const randomEmoji = () => 
    emojis.random({n: 1, nogroup: 'Flags,Symbols'})[0];

const replaceAll = (text: string, name: string, noun: string) => {
    if(!text.includes('<')) {
        return text;
    }
    name = name != null ? name : getRandomElement(names);
    noun = noun != null ? noun : getRandomElement(nouns);
    return replaceAll(replaceName(replaceNoun(text, noun), name), null, null);
}


export class FrankBot extends ActivityHandler {
    constructor() {
        super();
        this.onMessage(async (context, next) => {
            const message = context.activity.text.toLowerCase();
            const words = message.replace(/\?|!/g, '').split(' ');
            if (message.includes('ritrovo')) {
                const replyText = 'Ritrovo har pizza, pasta, sallader, mackor och bra kaffe, ' +
                    'samma som alltid.';
                await this.sendMessage(context, replyText);
            } else if (message.includes('fika')) {
                await this.sendReply(context, message, fikaReplies);
            }  else if (message.includes('phils') || message.includes("phil's")) {
                const replyText =
                    'De serverar alltid handburgare, man √§ter dem med h√§nderna.';
                await this.sendMessage(context, replyText);
            } else if (message.includes('lunch') && words.length < 6) {
                const offset = message.includes('imorgon') ? 1 : 0;
                const isToday = offset == 0;
                const lunchText = await this.fetchLunch(offset);
                const date = new Date();
                date.setDate(date.getDate() + offset);
                const dayOfWeek = date.toLocaleDateString('sv-SE', { weekday: 'long' });
                const dayWord = isToday ? 'Idag' : 'Imorgon';
                const replyText = `${dayWord} (${dayOfWeek}) s√• serveras det:\n\n` +
                    lunchText;
                await this.sendMessage(context, replyText);
            } else if (message.includes('team')) {
                const replyText =
                    'Om du fr√•gar mig s√• √§r det definitivt mest effektivt att splitta teamet p√• ' +
                    'back-end och front-end.';
                await this.sendReply(context, message, [replyText]);
            } else if (message.includes('var')) {
                await this.sendReply(context, message, whereReplies);
            } else if (message.includes('n√§r')) {
                await this.sendReply(context, message, whenReplies);
            } else if (message.includes('vem')) {
                await this.sendReply(context, message, nameReplies);
            } else if (message.includes('?')) {
                await this.sendReply(context, message, yesNoReplies);
            } else {
                await this.sendReply(context, message, factReplies);
            }
            await next();
        });

        this.onMembersAdded(async (context, next) => {
            const isFrank = context.activity.membersAdded
                .filter((m) => m.name === 'Frank').length < 0;
            const welcomeText =
                `Goddagens, jag heter Frank och kan ` +
                `svara p√• vad Sabis serverar f√∂r lunch idag genom att ` +
                `du fr√•gar mig "Lunch?".`;
            if (isFrank) {
                await this.sendMessage(context, welcomeText);
            }
            await next();
        });
    }

    private sendMessage(context: TurnContext, reply: string) {
        return context.sendActivity(MessageFactory.text(reply, reply));
    }

    private sendReply(context: TurnContext, message: string, replyList: string[]) {
        const mentionedNames = containedNames(message);
        const name = mentionedNames.length > 0 ? mentionedNames[0] : getRandomElement(names);
        const text = replaceAll(getRandomElement(replyList), name, null);
        const reply = `${text} ${randomEmoji()} `;
        return context.sendActivity(MessageFactory.text(reply, reply));
    }

    fetchLunch(offset: number = 0): Promise<any> {
        const parsed = AxiosInstance.get(url)
            .then(
                response => {
                    const liDays = parse(response.data, {
                        voidTag: {
                            tags: ['link', 'meta', 'head', 'img', 'script',
                                'figure', 'p', 'h1', 'h2', 'footer'],
                        }
                    }).querySelector('.menu-block__days')
                        .getElementsByTagName('li')
                        .map((e) => e.getElementsByTagName('ul'))
                        .filter((e) => e.length > 0)
                        .map((e) => e[0].getElementsByTagName('li'));
                    // Starts counting on Sunday.
                    const dayOfWeek = new Date().getDay();
                    if (dayOfWeek + offset == 0 || dayOfWeek + offset == 6) {
                        return 'G√• hem, det √§r helg.';
                    }
                    const dayData = liDays[dayOfWeek - 1 + offset];
                    const dishes = dayData.map((e) => {
                        const dish = e.getElementsByTagName('p')[0].innerText;
                        const icons = e.getElementsByTagName('svg')
                            .map((svg) => iconMap[svg.classNames.split(' ')
                                .filter(
                                    (iconName) => iconName !== 'icon'
                                ).join()])
                            .join(' ');
                        return '* ' + dish + ' ' + icons;
                    }).join('\n');
                    return dishes;
                }
            )
            .catch(
                () => new Promise((_) => 'N√•got gick √•t fanders.')
            );
        return parsed;
    }
}
